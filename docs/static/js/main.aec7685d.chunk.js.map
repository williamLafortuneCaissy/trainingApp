{"version":3,"sources":["data/dataPlan.js","components/_global/header.js","components/plan/view/PlanView.js","components/_global/timer.js","components/plan/start/Set.js","components/plan/start/PlanStart.js","components/plan/edit/ExerciseEdit.js","components/plan/edit/SetEdit.js","components/plan/edit/PlanEdit.js","components/plan/list/PlanList.js","App.js","reportWebVitals.js","index.js"],"names":["data","Header","props","className","backHref","to","back","title","nextHref","next","defaultProps","PlanView","planId","useParams","JSON","parse","localStorage","getItem","find","x","id","console","log","sets","length","class","map","set","Card","body","exercises","exercise","exerciseIndex","series","description","nbs","nbsType","Timer","useState","seconds","setSeconds","timer","setTimer","start","setStart","stopTimer","useEffect","interval","setInterval","diff","Date","now","toFixed","time","clearInterval","Button","size","onClick","Modal","centered","show","onHide","Body","variant","Set","nextSet","lastSet","activeSerie","setActiveSerie","btns","i","push","getSeriesBtns","text","block","getNextBtn","PlanStart","layoutRef","useRef","activeSet","setActiveSet","nbSets","current","focus","ref","tabIndex","when","message","ProgressBar","ExerciseEdit","removeExercise","handleChange","inputNameSuffix","setId","Form","Group","Label","type","icon","faTimes","Control","name","placeholder","onChange","value","required","Row","as","Col","xs","min","rep","SetEdit","index","addExercise","exerciceElements","options","getOptions","faPlus","PlanEdit","uuid","form","setForm","checkEmptySets","setCheckEmptySets","updateProp","prevObject","prop","e","splittedName","target","split","exerciseId","prevForm","prevSet","prevExercise","filter","history","useHistory","setElements","weight","break","onSubmit","preventDefault","allPlans","setItem","stringify","htmlFor","PlanList","url","useRouteMatch","alert","setAlert","plans","setPlans","fakedata","Alert","onClose","dismissible","ListGroup","plan","key","Item","Dropdown","Toggle","faEllipsisV","Menu","Link","Divider","prevPlan","App","basename","path","from","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aec7685d.chunk.js","sourcesContent":["const data = [{ \"id\": \"314c852-1e15-f455-2374-e26437477d\", \"title\": \"Yoga Routine\", \"sets\": [{ \"id\": \"e7f3b5b-ce1a-13e-c5ef-ea116d1b76db\", \"series\": \"1\", \"exercises\": [{ \"id\": \"c05a4c-a23b-5ba8-dab7-318165473bc1\", \"setId\": \"e7f3b5b-ce1a-13e-c5ef-ea116d1b76db\", \"title\": \"Head Spin Clock\", \"description\": \"\", \"nbs\": \"3\", \"nbsType\": \"rep\", \"weight\": \"\", \"break\": \"\" }] }, { \"id\": \"4240d5-d74-46e3-e4d3-812adce2e01f\", \"series\": \"1\", \"exercises\": [{ \"id\": \"061caa1-c5e2-2eaa-cb1-ded503fb1adf\", \"setId\": \"4240d5-d74-46e3-e4d3-812adce2e01f\", \"title\": \"Head Spin Anti-Clock\", \"description\": \"\", \"nbs\": \"3\", \"nbsType\": \"rep\", \"weight\": \"\", \"break\": \"\" }] }, { \"id\": \"3b43488-1df-bda-3014-4f861346c6b3\", \"series\": \"1\", \"exercises\": [{ \"id\": \"564f12-f07b-613c-5e32-002eaa024d\", \"setId\": \"3b43488-1df-bda-3014-4f861346c6b3\", \"title\": \"Head to shoulders\", \"description\": \"20s per sides\", \"nbs\": \"20\", \"nbsType\": \"sec\", \"weight\": \"\", \"break\": \"\" }] }, { \"id\": \"dc862da-7485-f83c-dcf-ceb4f4e1aabb\", \"series\": \"2\", \"exercises\": [{ \"id\": \"0286ca5-d5df-e7d-f1f-bd44f0555c1\", \"setId\": \"dc862da-7485-f83c-dcf-ceb4f4e1aabb\", \"title\": \"Foward fold\", \"description\": \"\", \"nbs\": \"15\", \"nbsType\": \"sec\", \"weight\": \"\", \"break\": \"\" }] }, { \"id\": \"f37bc-d840-f46-a10-83cbda54aee\", \"series\": \"3\", \"exercises\": [{ \"id\": \"6c2b6-2ffd-432e-6438-321ce34607\", \"setId\": \"f37bc-d840-f46-a10-83cbda54aee\", \"title\": \"Child's Pose\", \"description\": \"\", \"nbs\": \"10\", \"nbsType\": \"sec\", \"weight\": \"\", \"break\": \"\" }, { \"id\": \"4ff6cb0-c4-5a4e-60f4-ce08edfadc54\", \"setId\": \"f37bc-d840-f46-a10-83cbda54aee\", \"title\": \"Cobra's Pose\", \"description\": \"\", \"nbs\": \"10\", \"nbsType\": \"sec\", \"weight\": \"\", \"break\": \"\" }] }, { \"id\": \"2c13de8-c067-bce-d114-efb0c6a212e7\", \"series\": \"2\", \"exercises\": [{ \"id\": \"8f48d03-cb43-4fe-35a-aff60e707e\", \"setId\": \"2c13de8-c067-bce-d114-efb0c6a212e7\", \"title\": \"Down-Dog\", \"description\": \"\", \"nbs\": \"20\", \"nbsType\": \"sec\", \"weight\": \"\", \"break\": \"\" }, { \"id\": \"7c2731-846b-117c-6318-fb5d62aa0e6\", \"setId\": \"2c13de8-c067-bce-d114-efb0c6a212e7\", \"title\": \"Pigeon's pose\", \"description\": \"\", \"nbs\": \"20\", \"nbsType\": \"sec\", \"weight\": \"\", \"break\": \"\" }] }, { \"id\": \"01bab1d-d342-033-20d4-7ec11d541b2\", \"series\": \"1\", \"exercises\": [{ \"id\": \"08ab45-f646-7301-d24-a163882b5fca\", \"setId\": \"01bab1d-d342-033-20d4-7ec11d541b2\", \"title\": \"Full body Stretch\", \"description\": \"\", \"nbs\": \"10\", \"nbsType\": \"sec\", \"weight\": \"\", \"break\": \"\" }] }, { \"id\": \"bbb0b4-64ab-08da-b632-2c531041710\", \"series\": \"1\", \"exercises\": [{ \"id\": \"febe6c7-3303-53fc-d54-e35b10bee2\", \"setId\": \"bbb0b4-64ab-08da-b632-2c531041710\", \"title\": \"Back twist\", \"description\": \"Both sides\", \"nbs\": \"10\", \"nbsType\": \"sec\", \"weight\": \"\", \"break\": \"\" }] }, { \"id\": \"b158ce-854b-1cb-7cb1-4184b32ee\", \"series\": \"1\", \"exercises\": [{ \"id\": \"067f34-318-e74-f5a-444278e4512\", \"setId\": \"b158ce-854b-1cb-7cb1-4184b32ee\", \"title\": \"Big hug - Rounded back\", \"description\": \"\", \"nbs\": \"10\", \"nbsType\": \"sec\", \"weight\": \"\", \"break\": \"\" }] }, { \"id\": \"53baac-cae-5b3d-2217-46120a27583\", \"series\": \"2\", \"exercises\": [{ \"id\": \"4adb800-5bf6-2313-8672-4a3111624c20\", \"setId\": \"53baac-cae-5b3d-2217-46120a27583\", \"title\": \"Butterfly\", \"description\": \"\", \"nbs\": \"20\", \"nbsType\": \"sec\", \"weight\": \"\", \"break\": \"\" }] }, { \"id\": \"3ec5b56-06e8-66c6-d843-168fde300cfd\", \"series\": \"1\", \"exercises\": [{ \"id\": \"4d3fd65-0f58-dcb-1cef-f205b48eaeca\", \"setId\": \"3ec5b56-06e8-66c6-d843-168fde300cfd\", \"title\": \"1 legged foward fold\", \"description\": \"\", \"nbs\": \"20\", \"nbsType\": \"sec\", \"weight\": \"\", \"break\": \"\" }] }, { \"id\": \"32af21-60a-dfd-e80f-0df80c64de6\", \"series\": \"1\", \"exercises\": [{ \"id\": \"f12721f-0cdf-042d-f65-43520a414386\", \"setId\": \"32af21-60a-dfd-e80f-0df80c64de6\", \"title\": \"Wide-andle foward fold\", \"description\": \"\", \"nbs\": \"20\", \"nbsType\": \"sec\", \"weight\": \"\", \"break\": \"\" }] }] }]\r\n// [\r\n//     {\r\n//         \"id\": \"1\",\r\n//         \"title\": \"Yoga Routine\",\r\n//         \"sets\": [\r\n//             {\r\n//                 \"series\": \"1\",\r\n//                 \"break\": \"0\",\r\n//                 \"break\": \"0\",\r\n//                 \"exercises\": [\r\n//                     {\r\n//                         \"title\": \"Head Spin Clock\",\r\n//                         \"description\": null,\r\n//                         \"time\": null,\r\n//                         \"rep\": \"3\",\r\n//                     },\r\n//                 ],\r\n//             },\r\n//             {\r\n//                 \"series\": \"1\",\r\n//                 \"break\": \"0\",\r\n//                 \"exercises\": [\r\n//                     {\r\n//                         \"title\": \"Head Spin Anti-Clock\",\r\n//                         \"description\": null,\r\n//                         \"time\": null,\r\n//                         \"rep\": \"3\",\r\n//                     },\r\n//                 ],\r\n//             },\r\n//             {\r\n//                 \"series\": \"1\",\r\n//                 \"break\": \"0\",\r\n//                 \"exercises\": [\r\n//                     {\r\n//                         \"title\": \"Head to shoulders\",\r\n//                         \"description\": \"20s per sides\",\r\n//                         \"time\": \"20\",\r\n//                         \"rep\": null,\r\n//                     },\r\n//                 ],\r\n//             },\r\n//             {\r\n//                 \"series\": 2,\r\n//                 \"break\": \"0\",\r\n//                 \"exercises\": [\r\n//                     {\r\n//                         \"title\": \"Foward fold\",\r\n//                         \"description\": null,\r\n//                         \"time\": \"15\",\r\n//                         \"rep\": null,\r\n//                     },\r\n//                 ],\r\n//             },\r\n//             {\r\n//                 \"series\": 3,\r\n//                 \"break\": \"0\",\r\n//                 \"exercises\": [\r\n//                     {\r\n//                         \"title\": \"Child's Pose\",\r\n//                         \"description\": null,\r\n//                         \"time\": \"10\",\r\n//                         \"rep\": null,\r\n//                     },\r\n//                     {\r\n//                         \"title\": \"Cobra Pose\",\r\n//                         \"description\": null,\r\n//                         \"time\": \"10\",\r\n//                         \"rep\": null,\r\n//                     },\r\n//                 ],\r\n//             },\r\n//             {\r\n//                 \"series\": 2,\r\n//                 \"break\": \"0\",\r\n//                 \"exercises\": [\r\n//                     {\r\n//                         \"title\": \"Down-Dog\",\r\n//                         \"description\": null,\r\n//                         \"time\": \"20\",\r\n//                         \"rep\": null,\r\n//                     },\r\n//                     {\r\n//                         \"title\": \"Pidgeon pose\",\r\n//                         \"description\": null,\r\n//                         \"time\": \"20\",\r\n//                         \"rep\": null,\r\n//                     },\r\n//                 ],\r\n//             },\r\n//             {\r\n//                 \"series\": \"1\",\r\n//                 \"break\": \"0\",\r\n//                 \"exercises\": [\r\n//                     {\r\n//                         \"title\": \"Full Body Stretch\",\r\n//                         \"description\": null,\r\n//                         \"time\": \"10\",\r\n//                         \"rep\": null,\r\n//                     },\r\n//                 ],\r\n//             },\r\n//             {\r\n//                 \"series\": \"1\",\r\n//                 \"break\": \"0\",\r\n//                 \"exercises\": [\r\n//                     {\r\n//                         \"title\": \"Back twist\",\r\n//                         \"description\": null,\r\n//                         \"time\": \"10\",\r\n//                         \"rep\": null,\r\n//                     },\r\n//                 ],\r\n//             },\r\n//             {\r\n//                 \"series\": \"1\",\r\n//                 \"break\": \"0\",\r\n//                 \"exercises\": [\r\n//                     {\r\n//                         \"title\": \"Big hug - Rounded back\",\r\n//                         \"description\": null,\r\n//                         \"time\": \"10\",\r\n//                         \"rep\": null,\r\n//                     },\r\n//                 ],\r\n//             },\r\n//             {\r\n//                 \"series\": 2,\r\n//                 \"break\": \"0\",\r\n//                 \"exercises\": [\r\n//                     {\r\n//                         \"title\": \"Butterfly\",\r\n//                         \"description\": null,\r\n//                         \"time\": \"20\",\r\n//                         \"rep\": null,\r\n//                     },\r\n//                 ],\r\n//             },\r\n//             {\r\n//                 \"series\": \"1\",\r\n//                 \"break\": \"0\",\r\n//                 \"exercises\": [\r\n//                     {\r\n//                         \"title\": \"1 legged fowad Fold\",\r\n//                         \"description\": null,\r\n//                         \"time\": \"20\",\r\n//                         \"rep\": null,\r\n//                     },\r\n//                 ],\r\n//             },\r\n//             {\r\n//                 \"series\": \"1\",\r\n//                 \"break\": \"0\",\r\n//                 \"exercises\": [\r\n//                     {\r\n//                         \"title\": \"Wide-angle Foward Fold\",\r\n//                         \"description\": null,\r\n//                         \"time\": \"20\",\r\n//                         \"rep\": null,\r\n//                     },\r\n//                 ],\r\n//             },\r\n\r\n//         ],\r\n//     },\r\n// ]\r\n\r\nexport default data;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <header className=\"header layout-header \">\r\n            <div className=\"header-left\">\r\n                {props.backHref &&\r\n                    <Link className=\"header-btn\" to={props.backHref}>\r\n                        <i className=\"mdi mdi-chevron-left\"></i>\r\n                        {props.back}\r\n                    </Link>\r\n                }\r\n            </div>\r\n            <div className=\"header-center\">\r\n                <h1 className=\"h4 text-truncate py-2\">{props.title}</h1>\r\n            </div>\r\n            <div className=\"header-right\">\r\n                {props.nextHref &&\r\n                    <Link className=\"header-btn\" to={props.nextHref}>\r\n                        {props.next}\r\n                        <i className=\"mdi mdi-chevron-right\"></i>\r\n                    </Link>\r\n                }\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n\r\nHeader.propTypes = {\r\n    back: PropTypes.string,\r\n    backHref: PropTypes.string,\r\n    title: PropTypes.string.isRequired,\r\n    next: PropTypes.string,\r\n    nextHref: PropTypes.string,\r\n};\r\n\r\nHeader.defaultProps = {\r\n    back: \"Back\",\r\n    title: \"\",\r\n    next: \"Next\",\r\n};","import React, { Fragment } from \"react\";\r\nimport { Card, Container } from \"react-bootstrap\";\r\nimport { useParams } from \"react-router\";\r\nimport fakedata from '../../../data/dataPlan'\r\nimport Header from \"../../_global/header\";\r\n\r\nconst PlanView = () => {\r\n\r\n    let { planId } = useParams(); //get url id base on parent :planId\r\n\r\n    const storage = JSON.parse(localStorage.getItem(\"plans\"))\r\n    const data = storage.find(x => x.id == planId);\r\n    console.log(data)\r\n\r\n    return (\r\n        <div className=\"layout\">\r\n            <Header title={data.title} next={'Start'} nextHref={'/plan/' + data.id} backHref=\"/\" />\r\n            <main className=\"layout-main container\">\r\n                {!data.sets.length &&\r\n                    <p class=\"text-center\">This plan has no exercises</p>\r\n                }\r\n                {data.sets.map(set => (\r\n                    <Card body key={set.id} className=\"mb-3\">\r\n\r\n                        {/* added a second loop because of sets */}\r\n                        {set.exercises.map((exercise, exerciseIndex) => (\r\n                            <Fragment key={exercise.id}>\r\n                                {exerciseIndex > 0 && <hr />}\r\n\r\n                                <div className=\"d-flex justify-content-between\">\r\n                                    <div className=\"h4\">{exercise.title}</div>\r\n                                    {(exerciseIndex === 0 && set.series) &&\r\n                                        <div className=\"text-nowrap\">\r\n                                            <span className=\"font-weight-bold small\">Series : </span>\r\n                                            <span>{set.series}x</span>\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                                {exercise.description &&\r\n                                    <p className=\"mb-1\">{exercise.description}</p>\r\n                                }\r\n                                <div className=\"mb-2\">\r\n                                    <span className=\"font-weight-bold small\">Rep : </span>\r\n                                    <span>\r\n                                        {(exercise.nbs && exercise.nbsType) &&\r\n                                            <>\r\n                                                {exercise.nbs}\r\n                                                {exercise.nbsType === \"rep\" && \"x\"}\r\n                                                {exercise.nbsType === \"sec\" && \"s\"}\r\n                                            </>\r\n                                        }\r\n                                    </span>\r\n                                </div>\r\n                            </Fragment>\r\n                        ))}\r\n\r\n                    </Card>\r\n                ))}\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlanView;","import { Fragment, useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { Button, Modal } from 'react-bootstrap';\r\n\r\nconst Timer = (props) => {\r\n    const [seconds, setSeconds] = useState(null);\r\n    const [timer, setTimer] = useState(false); // used to open modal + start/close timer\r\n    const [start, setStart] = useState(null); // date.now() when timer start, used for time diff\r\n\r\n    const startTimer = () => {\r\n        setSeconds(props.time);\r\n        setStart(Date.now());\r\n        setTimer(true);\r\n    }\r\n    const stopTimer = () => {\r\n        setTimer(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if (timer) {\r\n            interval = setInterval(() => {\r\n                if (seconds > 0) {\r\n                    const diff = ((Date.now() - start) / 1000).toFixed(0);\r\n                    setSeconds(props.time - diff);\r\n                } else {\r\n                    clearInterval(interval);\r\n                }\r\n            }, 1000);\r\n        }\r\n\r\n        // returns something on unmount (can return function to trigger it)\r\n        return () => clearInterval(interval);\r\n\r\n    }, [timer, seconds]);\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <Button size=\"lg\" onClick={startTimer}>Start Timer</Button>\r\n            <Modal centered show={timer} onHide={stopTimer} className=\"text-dark timer\">\r\n                <Modal.Body>\r\n                    <div>\r\n                        <div className=\"display-1 timer-number mb-5\">\r\n                            {seconds}\r\n                        </div>\r\n                        <Button variant=\"secondary\" size=\"lg\" onClick={stopTimer}>Stop Timer</Button>\r\n                    </div>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Timer;","import React, { Fragment, useEffect, useState } from 'react';\r\n// eslint-disable-next-line\r\nimport { Button, Card, Col, Container, Modal, ProgressBar, Row } from 'react-bootstrap';\r\nimport { Link, useParams, useRouteMatch } from 'react-router-dom';\r\nimport fakedata from '../../../data/dataPlan'\r\nimport Timer from '../../_global/timer';\r\n\r\n/*\r\n* @param {bool} lastSet\r\n*/\r\nconst Set = ({ data, nextSet, lastSet }) => {\r\n\r\n    const [activeSerie, setActiveSerie] = useState(1)\r\n\r\n    // force the reset of activeSerie everytime its a new sets\r\n    useEffect(() => {\r\n        setActiveSerie(1)\r\n    }, [data])\r\n\r\n\r\n    const getSeriesBtns = () => {\r\n        let btns = [];\r\n        for (let i = 1; i <= data.series; i++) {\r\n            let className = 'series-btn ';\r\n\r\n            if (i <= activeSerie) {\r\n                className += 'active ';\r\n            }\r\n\r\n            btns.push(\r\n                <button\r\n                    key={`Serie${i}`}\r\n                    onClick={() => setActiveSerie(i)}\r\n                    className={className}>\r\n                    {i}\r\n                </button>\r\n            )\r\n        }\r\n        return btns;\r\n    }\r\n\r\n    const getNextBtn = () => {\r\n        let text = null;\r\n        let onClick = null;\r\n\r\n        if (activeSerie < data.series) {\r\n            onClick = () => setActiveSerie(activeSerie + 1);\r\n            text = 'Next Series';\r\n\r\n        } else if (!lastSet) {\r\n            onClick = nextSet;\r\n            text = 'Next Series';\r\n\r\n        } else {\r\n            onClick = nextSet;\r\n            text = 'Done !';\r\n        }\r\n\r\n        return <Button variant=\"secondary\" block onClick={onClick}>{text}</Button>;\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {data.exercises.map(exercise => (\r\n                <Card body key={exercise.id} className=\"text-center mb-3\">\r\n                    <div className=\"h2\">{exercise.title}</div>\r\n                    {exercise.description &&\r\n                        <p className=\"mb-1\">( {exercise.description} )</p>\r\n                    }\r\n                    <div className=\"d-flex justify-content-around\">\r\n                        {(exercise.nbs && exercise.nbsType) &&\r\n                            <div className=\"mb-4\">\r\n                                <div className=\"display-1\">{exercise.nbs}</div>\r\n                                <div className=\"h3\">\r\n                                    {exercise.nbsType === \"sec\" && \"Seconds\"}\r\n                                    {exercise.nbsType === \"rep\" && \"Repetitions\"}\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    {exercise.nbsType === \"sec\" &&\r\n                        <div className=\"mb-4\">\r\n                            <Timer time={exercise.nbs} />\r\n                            {/* <div className=\"display-1 text-center\">{timer}</div> */}\r\n                        </div>\r\n                    }\r\n                </Card>\r\n            ))}\r\n            <div className=\"mt-auto mb-3\">\r\n                {data.series > 1 &&\r\n                    <Fragment>\r\n                        <div className=\"text-center mb-3\">\r\n                            <div className=\"text-light mb-3 lh-1\">Series</div>\r\n                            {getSeriesBtns()}\r\n                        </div>\r\n                    </Fragment>\r\n                }\r\n\r\n                {getNextBtn()}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Set;","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Card, Col, ProgressBar, Row } from \"react-bootstrap\";\r\nimport { Switch, Route, useRouteMatch, Redirect, Prompt, useParams } from 'react-router-dom';\r\nimport fakedata from '../../../data/dataPlan'\r\nimport Header from \"../../_global/header\";\r\nimport Set from \"./Set\";\r\nimport { Link } from 'react-router-dom';\r\n\r\n// ===========================================================\r\n// This Manages which set to be displayed\r\n// ===========================================================\r\nconst PlanStart = () => {\r\n    const layoutRef = useRef(null); // used to resetFocus on exercise switch\r\n\r\n    // Get data based on the planId in the url\r\n    let { planId } = useParams(); //get url id of the plan  in the url\r\n\r\n    const storage = JSON.parse(localStorage.getItem(\"plans\"))\r\n    const data = storage.find(x => x.id == planId);\r\n\r\n    const [activeSet, setActiveSet] = useState(1)\r\n    const nextSet = () => setActiveSet(activeSet + 1)\r\n    const previousSet = () => setActiveSet(activeSet - 1)\r\n\r\n    const nbSets = data.sets.length || null;\r\n\r\n    const getProgress = () => {\r\n\r\n        let progress = null\r\n        if (activeSet === 1) {\r\n            progress = 0\r\n        } else {\r\n            progress = (activeSet - 1) / nbSets * 100;\r\n        }\r\n\r\n        return progress\r\n\r\n    }\r\n\r\n    const promptMessage = () => {\r\n        if (activeSet === 1 || activeSet >= nbSets) {\r\n            return true;\r\n        } else {\r\n            return 'Are you sure you want to leave?';\r\n        }\r\n    }\r\n\r\n    // reset :focus when we change sets\r\n    useEffect(() => {\r\n        layoutRef.current.focus();\r\n    }, [activeSet])\r\n\r\n    return (\r\n        <>\r\n            <div ref={layoutRef} className=\"layout\" tabIndex=\"-1\">\r\n                <Prompt when={true} message={promptMessage} />\r\n                <Header title={data.title} backHref={'/plan'} />\r\n                <main className=\"layout-main container d-flex flex-column\">\r\n                    {!nbSets ?\r\n                        <p class=\"text-center\">This plan has no exercises</p>\r\n                        :\r\n                        activeSet <= nbSets ?\r\n                            <Set data={data.sets[activeSet - 1]} nextSet={nextSet} lastSet={activeSet === nbSets} />\r\n                            :\r\n                            <Card body className=\"text-center\">\r\n                                <div className=\"h1 mb-3\">Good job !</div>\r\n                                <Link to=\"/plan\" className=\"btn btn-block btn-primary\">Back to list</Link>\r\n                            </Card>\r\n\r\n                    }\r\n                </main>\r\n\r\n                {nbSets &&\r\n                    <footer className=\"layout-footer bg-white text-primary\">\r\n                        <div className=\"container\">\r\n                            <div className=\"px-3 pt-3\">\r\n                                <ProgressBar now={getProgress()} />\r\n                            </div>\r\n                            <div className=\"d-flex\">\r\n                                {activeSet > 1 &&\r\n                                    <div className=\"p-2\">\r\n                                        <button className=\"p-2\" onClick={previousSet}>\r\n                                            <i className=\"mdi mdi-chevron-left\"></i>\r\n                                            <span>Previous Set</span>\r\n                                        </button>\r\n                                    </div>\r\n                                }\r\n                                {activeSet <= nbSets &&\r\n                                    <div className=\"p-2 ml-auto\">\r\n                                        <button className=\"p-2\" onClick={nextSet}>\r\n                                            {activeSet < nbSets ?\r\n                                                <span>Next Set</span>\r\n                                                :\r\n                                                <span>Done</span>\r\n                                            }\r\n                                            <i className=\"mdi mdi-chevron-right\"></i>\r\n                                        </button>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </footer>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PlanStart;","import { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useState } from 'react';\r\nimport { Button, Card, Col, Container, Form, Row } from 'react-bootstrap';\r\n// ==============================================\r\n// this manages the form\r\n// ==============================================\r\n// @param {func} deleteExercise deletes this exercise\r\nconst ExerciseEdit = ({ exercise, removeExercise, handleChange }) => {\r\n\r\n    const inputNameSuffix = `.${exercise.setId}.${exercise.id}`\r\n\r\n    return (\r\n        <>\r\n            <Form.Group>\r\n                <div className=\"d-flex align-items-start\">\r\n                    <Form.Label>Exercise</Form.Label>\r\n                    <button type=\"button\" className=\"ml-auto\" onClick={removeExercise}>\r\n                        <FontAwesomeIcon icon={faTimes} />\r\n                    </button>\r\n                </div>\r\n                <Form.Control\r\n                    name={`title${inputNameSuffix}`}\r\n                    type=\"text\"\r\n                    placeholder=\"ex: Foward Fold\"\r\n                    onChange={handleChange}\r\n                    value={exercise.title}\r\n                    required\r\n                />\r\n            </Form.Group>\r\n            <Form.Group>\r\n                <Form.Label>Description</Form.Label>\r\n                <Form.Control\r\n                    name={`description${inputNameSuffix}`}\r\n                    type=\"text\"\r\n                    placeholder=\"ex: 1 per leg\"\r\n                    onChange={handleChange}\r\n                    value={exercise.description}\r\n                />\r\n            </Form.Group>\r\n            <Row className=\"pb-2\">\r\n                <Form.Group as={Col} xs=\"8\">\r\n                    <Form.Label>Reps / Secs</Form.Label>\r\n                    <Form.Row>\r\n                        <Col xs=\"6\">\r\n                            <Form.Control\r\n                                name={`nbs${inputNameSuffix}`}\r\n                                type=\"number\"\r\n                                min={0}\r\n                                placeholder=\"-\"\r\n                                onChange={handleChange}\r\n                                value={exercise.rep}\r\n                            />\r\n                        </Col>\r\n                        <Col xs=\"6\">\r\n                            <Form.Control\r\n                                name={`nbsType${inputNameSuffix}`}\r\n                                as=\"select\"\r\n                                onChange={handleChange}\r\n                                value={exercise.nbsType}\r\n                            >\r\n                                <option key={'rep'} value=\"rep\">Rep</option>\r\n                                <option key={'sec'} value=\"sec\">Sec</option>\r\n                            </Form.Control>\r\n                        </Col>\r\n                    </Form.Row>\r\n                </Form.Group>\r\n                {/* <Form.Group as={Col} xs=\"6\">\r\n                    <Form.Label>Weight</Form.Label>\r\n                    <Form.Row>\r\n                        <Col xs=\"6\">\r\n                            <Form.Control\r\n                                name={`weight${inputNameSuffix}`}\r\n                                type=\"number\"\r\n                                min={0}\r\n                                placeholder=\"-\"\r\n                                onChange={handleChange}\r\n                                value={exercise.weight}\r\n                            />\r\n                        </Col>\r\n                        <Col xs=\"6\" className=\"align-self-end\">lbs</Col>\r\n                    </Form.Row>\r\n                </Form.Group> */}\r\n                {/* <Form.Group as={Col} xs=\"6\" className=\"mb-0\">\r\n                    <Form.Label>Break</Form.Label>\r\n                    <Form.Row>\r\n                        <Col xs=\"6\">\r\n                            <Form.Control\r\n                                name={`break${inputNameSuffix}`}\r\n                                type=\"number\"\r\n                                min={0}\r\n                                placeholder=\"-\"\r\n                                onChange={handleChange}\r\n                                value={exercise.break}\r\n                            />\r\n                        </Col>\r\n                        <Col xs=\"6\" className=\"align-self-end\">sec</Col>\r\n                    </Form.Row>\r\n                </Form.Group> */}\r\n            </Row>\r\n            <hr />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ExerciseEdit;","import { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useEffect, useState } from 'react';\r\nimport { Button, Card, Col, Container, Form, Row } from 'react-bootstrap';\r\nimport ExerciseEdit from './ExerciseEdit';\r\nimport { exerciseFormat } from '../../../data/dataHelper';\r\nimport uuid from 'react-uuid';\r\n// =======================================================\r\n// this manages the add / remove / list exercice\r\n// =======================================================\r\nconst SetEdit = ({ index, set, addExercise, removeExercise, handleChange }) => {\r\n    // console.log(\"set: \", set)\r\n\r\n    useEffect(() => {\r\n        addExercise()\r\n    }, []);\r\n\r\n    const getOptions = () => {\r\n        let options = []\r\n        for (let i = 1; i < 10; i++) {\r\n            options.push(\r\n                <option key={i} value={i}>{i}</option>\r\n            )\r\n        }\r\n\r\n        return options\r\n    }\r\n\r\n    const exerciceElements = set.exercises.map((exercise) => (\r\n        <ExerciseEdit\r\n            key={exercise.id}\r\n            exercise={exercise}\r\n            removeExercise={() => removeExercise(set.id, exercise.id)}\r\n            handleChange={handleChange}\r\n        />\r\n    ))\r\n\r\n    return (\r\n        <>\r\n            <Card className=\"mb-3 set\">\r\n                <Card.Header className=\"d-flex py-2\">\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <Form.Label className=\"mb-0 mr-3\">Series:</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            name={`series.${set.id}`}\r\n                            onChange={handleChange}\r\n                            value={set.series}\r\n                        >\r\n                            {getOptions()}\r\n                        </Form.Control>\r\n                    </div>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    {exerciceElements}\r\n                    <div className=\"text-center\">\r\n                        <button type=\"button\" className=\"my-n2 py-2 px-3\" onClick={addExercise}><FontAwesomeIcon icon={faPlus} /></button>\r\n                    </div>\r\n                </Card.Body>\r\n            </Card>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SetEdit;","import { faLink, faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useState } from 'react';\r\nimport { Button, Card, Col, Container, Row, Form } from 'react-bootstrap';\r\nimport Header from '../../_global/header';\r\nimport SetEdit from './SetEdit';\r\nimport { setFormat } from '../../../data/dataHelper';\r\nimport uuid from 'react-uuid'\r\nimport { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\r\n\r\nconst initialValues = {\r\n\tplanTitle: '',\r\n\tsets: [],\r\n}\r\n\r\n// ===============================================================\r\n// this manages the add / remove / list Sets, as well as the title\r\n// ===============================================================\r\nconst PlanEdit = () => {\r\n\tconst [form, setForm] = useState({\r\n\t\tid: uuid(),\r\n\t\ttitle: \"\",\r\n\t\tsets: []\r\n\t})\r\n\r\n\t//used to check if we have a set without any exercise\r\n\tconst [checkEmptySets, setCheckEmptySets] = useState(false);\r\n\r\n\t// simple helper used to simplify complex setForm()\r\n\t// return new object with the updated prop\r\n\t// {prevObject} | \"prop\"\r\n\tfunction updateProp(prevObject, prop, value) {\r\n\t\treturn {\r\n\t\t\t...prevObject,\r\n\t\t\t[prop]: value\r\n\t\t}\r\n\t}\r\n\r\n\tfunction handleChange(e) {\r\n\t\t// inputName is: prop.{setId}.{exerciseId}\r\n\t\t// setId and exerciseId if nessessary\r\n\r\n\t\t// console.log(e.target.name)\r\n\r\n\t\tconst splittedName = e.target.name.split(\".\")\r\n\t\tconst prop = splittedName[0]\r\n\t\tconst setId = splittedName[1] || null\r\n\t\tconst exerciseId = splittedName[2] || null\r\n\r\n\t\tsetForm(prevForm => {\r\n\t\t\tif (!setId) {\r\n\t\t\t\t// console.log('update plan level')\r\n\t\t\t\treturn updateProp(prevForm, prop, e.target.value)\r\n\t\t\t} else {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...prevForm,\r\n\t\t\t\t\tsets: prevForm.sets.map(prevSet => {\r\n\t\t\t\t\t\tif (prevSet.id === setId) {\r\n\t\t\t\t\t\t\tif (!exerciseId) {\r\n\t\t\t\t\t\t\t\t// console.log('update set level')\r\n\t\t\t\t\t\t\t\treturn updateProp(prevSet, prop, e.target.value)\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\t...prevSet,\r\n\t\t\t\t\t\t\t\t\texercises: prevSet.exercises.map(prevExercise => {\r\n\t\t\t\t\t\t\t\t\t\tif (prevExercise.id === exerciseId) {\r\n\t\t\t\t\t\t\t\t\t\t\t// console.log('update exercise level')\r\n\t\t\t\t\t\t\t\t\t\t\treturn updateProp(prevExercise, prop, e.target.value)\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\treturn prevExercise\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn prevSet\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tfunction addSet() {\r\n\t\tsetForm(prevForm => ({\r\n\t\t\t...prevForm,\r\n\t\t\tsets: [\r\n\t\t\t\t...prevForm.sets,\r\n\t\t\t\t{\r\n\t\t\t\t\tid: uuid(),\r\n\t\t\t\t\tseries: \"1\",\r\n\t\t\t\t\texercises: []\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t}))\r\n\t}\r\n\r\n\tfunction addExercise(setId) {\r\n\t\tsetForm(prevForm => ({\r\n\t\t\t...prevForm,\r\n\t\t\tsets: prevForm.sets.map(prevSet => (\r\n\t\t\t\tprevSet.id === setId ?\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t...prevSet,\r\n\t\t\t\t\t\texercises: [\r\n\t\t\t\t\t\t\t...prevSet.exercises,\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tid: uuid(),\r\n\t\t\t\t\t\t\t\tsetId: prevSet.id,\r\n\t\t\t\t\t\t\t\ttitle: '',\r\n\t\t\t\t\t\t\t\tdescription: '',\r\n\t\t\t\t\t\t\t\tnbs: '', // number\r\n\t\t\t\t\t\t\t\tnbsType: 'rep', // rep || sec\r\n\t\t\t\t\t\t\t\tweight: '',\r\n\t\t\t\t\t\t\t\tbreak: '',\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t}\r\n\t\t\t\t\t:\r\n\t\t\t\t\tprevSet\r\n\t\t\t)),\r\n\t\t}))\r\n\t}\r\n\r\n\tfunction removeExercise(setId, exerciseId) {\r\n\t\tsetForm(prevForm => {\r\n\t\t\treturn {\r\n\t\t\t\t...prevForm,\r\n\t\t\t\tsets: prevForm.sets.map(prevSet => {\r\n\t\t\t\t\tif (prevSet.id === setId) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t...prevSet,\r\n\t\t\t\t\t\t\texercises: prevSet.exercises.filter(prevExercise => prevExercise.id !== exerciseId)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn prevSet\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t})\r\n\t\tsetCheckEmptySets(true)\r\n\t}\r\n\r\n\t// remove every sets that has no exercises\r\n\tuseEffect(() => {\r\n\t\tif (checkEmptySets) {\r\n\t\t\tsetForm(prevForm => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...prevForm,\r\n\t\t\t\t\tsets: prevForm.sets.filter(set => set.exercises.length > 0)\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tsetCheckEmptySets(false)\r\n\t\t}\r\n\t}, [checkEmptySets]);\r\n\r\n\tlet history = useHistory()\r\n\tfunction handleSubmit(e) {\r\n\t\te.preventDefault()\r\n\r\n\t\t// console.log(\"Submit\", form)\r\n\t\tconst allPlans = JSON.parse(localStorage.getItem(\"plans\")) || []\r\n\t\tallPlans.push(form)\r\n\t\tlocalStorage.setItem(\"plans\", JSON.stringify(allPlans))\r\n\r\n\t\thistory.push('/plan')\r\n\t}\r\n\r\n\tconst setElements = form.sets.map(set => (\r\n\t\t<SetEdit\r\n\t\t\tkey={set.id}\r\n\t\t\tset={set}\r\n\t\t\taddExercise={() => addExercise(set.id)}\r\n\t\t\tremoveExercise={removeExercise}\r\n\t\t\thandleChange={handleChange}\r\n\t\t/>\r\n\t))\r\n\r\n\treturn (\r\n\t\t<div className=\"layout\">\r\n\t\t\t<Header title={'Create plan'} backHref=\"/\" />\r\n\t\t\t<main className=\"layout-main container\">\r\n\t\t\t\t<Form onSubmit={handleSubmit}>\r\n\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t<Form.Label htmlFor=\"planTitle\">Main Title</Form.Label>\r\n\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\t\t\tname=\"title\"\r\n\t\t\t\t\t\t\tplaceholder=\"ex: My First Plan!\"\r\n\t\t\t\t\t\t\tvalue={form.title}\r\n\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t{setElements}\r\n\t\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t\t<Button variant=\"light\" onClick={addSet}>\r\n\t\t\t\t\t\t\t<FontAwesomeIcon icon={faPlus} />\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<Button type=\"submit\" variant=\"light\" block className=\"mt-3\">Save</Button>\r\n\t\t\t\t</Form>\r\n\t\t\t</main>\r\n\t\t\t{/* {console.log(\"render\", form)} */}\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n\r\nexport default PlanEdit;","import PropTypes from 'prop-types';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Button, Col, Container, Dropdown, Form, ListGroup, Row, Alert } from 'react-bootstrap';\r\nimport { Link, useRouteMatch } from 'react-router-dom';\r\nimport Header from '../../_global/header';\r\nimport fakedata from '../../../data/dataPlan'\r\nimport { faEllipsisV } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst PlanList = () => {\r\n\r\n    const { url } = useRouteMatch();\r\n    const [alert, setAlert] = useState(false); // currently only show the \"default plan added\"\r\n    const [plans, setPlans] = useState(JSON.parse(localStorage.getItem(\"plans\")) || []);\r\n\r\n    function handleDelete(planId) {\r\n        setPlans(prevPlan => prevPlan.filter(plan => plan.id != planId))\r\n    }\r\n\r\n    useEffect(() => {\r\n        // set default data so we dont have to create a plan everytime\r\n        if (!plans.length) {\r\n            setPlans(fakedata)\r\n            setAlert(true)\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"plans\", JSON.stringify(plans))\r\n    }, [plans]);\r\n\r\n    // console.log(plans)\r\n\r\n    return (\r\n        <div className=\"layout\">\r\n            {alert &&\r\n                <Alert variant=\"warning\" onClose={() => setAlert(false)} dismissible>\r\n                    A default plan was added to the list.\r\n                </Alert>\r\n            }\r\n            <Header title={'Plans'} next=\"Create\" nextHref={url + \"/create\"} />\r\n            <main className=\"layout-main container\">\r\n                <ListGroup>\r\n                    {plans.map((plan, key) => (\r\n                        <ListGroup.Item key={key} className=\"bg-light\">\r\n                            <Form.Row>\r\n                                <Col xs=\"auto\" className=\"align-self-center flex-grow-1\"><h2 className=\"h5\">{plan.title}</h2></Col>\r\n                                <Col xs=\"auto\">\r\n                                    <Link to={url + '/' + plan.id} className=\"btn btn-block btn-primary\">Start</Link>\r\n                                </Col>\r\n                                <Col xs=\"auto\">\r\n                                    {/* <Link to={url + '/' + plan.id + '/view'} className=\"btn btn-block btn-link\">View</Link> */}\r\n                                    <Dropdown>\r\n                                        <Dropdown.Toggle variant=\"link\" className=\"no-caret\">\r\n                                            <FontAwesomeIcon icon={faEllipsisV} />\r\n                                        </Dropdown.Toggle>\r\n\r\n                                        <Dropdown.Menu>\r\n                                            <Dropdown.Item as={Link} to={url + '/' + plan.id + '/view'}>View</Dropdown.Item>\r\n                                            {/* <Dropdown.Divider /> */}\r\n                                            {/* <Dropdown.Item href=\"#/action-3\">Edit</Dropdown.Item> */}\r\n                                            <Dropdown.Divider />\r\n                                            <Dropdown.Item onClick={() => handleDelete(plan.id)}>Delete</Dropdown.Item>\r\n                                        </Dropdown.Menu>\r\n                                    </Dropdown>\r\n                                </Col>\r\n                            </Form.Row>\r\n                        </ListGroup.Item>\r\n                    ))}\r\n                </ListGroup>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlanList;","import './assets/scss/style.scss';\r\n\r\nimport { BrowserRouter, Link, Redirect, Route, Switch } from 'react-router-dom';\r\nimport PlanView from './components/plan/view/PlanView';\r\nimport PlanStart from './components/plan/start/PlanStart';\r\nimport PlanEdit from './components/plan/edit/PlanEdit';\r\nimport PlanList from './components/plan/list/PlanList';\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <BrowserRouter basename=\"/trainingApp\">\r\n                <Switch>\r\n                    <Route path={'/plan/create'}>\r\n                        <PlanEdit />\r\n                    </Route>\r\n                    <Route path={'/plan/:planId/view'}>\r\n                        <PlanView />\r\n                    </Route>\r\n                    <Route path={'/plan/:planId'}>\r\n                        <PlanStart />\r\n                    </Route>\r\n                    <Route path={'/plan'}>\r\n                        <PlanList />\r\n                    </Route>\r\n                    <Redirect from=\"/\" to=\"/plan\" />\r\n                </Switch>\r\n            </BrowserRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}